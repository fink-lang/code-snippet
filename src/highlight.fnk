{pad_start} = import '@fink/std-lib/str'
{split} = import '@fink/std-lib/regex'
{length, join, drop, take, insert_at} = import '@fink/std-lib/iter'
{clamp} = import '@fink/std-lib/math'


default_opts = dict:
  lines: dict:
    before: 4
    after: 3


---
Highlight the `code` snippet at the given location `loc`.

Optionally the number of lines before and after the highlighted
location can be providerd by `options`.
---
highlight_code_loc = fn code, loc, options=default_opts:
  {start, end} = loc
  {lines: {before, after}} = options
  min = before

  lines = split code, '\n'
  max_lines = length lines

  start_line = clamp 0, start.line - before, max_lines - min
  insert_line = start.line - start_line
  end_line = clamp 0, end.line + after, max_lines

  line_num_padding = length '${end_line}'
  underline = pad_start '^', 3 + line_num_padding + start.column, ' '

  pipe lines:
    drop start_line
    take end_line - start_line

    map line, idx=0:
      line_num = pad_start '${start_line + idx + 1}', line_num_padding
      ('${line_num}| ${line}', idx + 1)

    insert_at insert_line, [underline]

    join '\n'

