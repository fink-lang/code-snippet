{pad_start, repeat} = import '@fink/std-lib/str'
{split} = import '@fink/std-lib/regex'
{length, join} = import '@fink/std-lib/iter'
{min, max} = import '@fink/std-lib/math'


# TODO: move to std-lib
bracket = fn min_val, value, max_val:
  max min_val, min value, max_val

# TODO: move to std-lib
slice = fn start, end: fn items:
  items.slice start, end

# TODO: move to std-lib
split_at = fn idx: fn [...items]:
  left = items.slice 0, idx
  right = items.slice idx
  [left, right]


default_opts = dict:
  lines: dict:
    before: 4
    after: 3


---
Highlight the `code` snippet at the given location `loc`.

Optionally the number of lines before and after the highlighted
location can be providerd by `options`.
---
highlight_code_loc = fn code, loc, options=default_opts:
  {start, end} = loc
  {lines: {before, after}} = options
  min = before

  lines = split code, '\n'
  max_lines = length lines

  start_line = bracket 0, start.line - before, max_lines - min
  end_line = bracket 0, end.line + after, max_lines

  pad = length '${end_line}'
  underline = '${repeat ' ', pad + start.column}  ^'

  pipe lines:
    slice start_line, end_line

    map line, idx=0:
      line_num = pad_start '${start_line + idx + 1}',  pad
      ('${line_num}| ${line}', idx + 1)

    split_at start.line - start_line

    fn [before_lines, after_lines]:
      list:
        ...before_lines,
        underline,
        ...after_lines

    join '\n'

